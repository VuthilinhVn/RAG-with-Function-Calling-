# rag/chatbot_main.py

import os
import json
from dotenv import load_dotenv
from openai import OpenAI
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from helper_function import about_booking, about_products, reviews_search
from function_call_utils import remove_extra_quotes, remove_simulated_conversation
from function_meta import functions_metadata
from memory import init_memory


# Load .env
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=api_key)

# Thi·∫øt l·∫≠p b·ªô nh·ªõ h·ªôi tho·∫°i (system prompt)
# Kh·ªüi t·∫°o b·ªô nh·ªõ h·ªôi tho·∫°i
messages = init_memory()

# V√≤ng l·∫∑p chat
def run_chat():
    while True:
        user_input = input("üßë You: ")
        if user_input.lower() in ["exit", "quit"]:
            break

        messages.append({"role": "user", "content": user_input})

        try:
            # G·ª≠i request t·ªõi GPT v·ªõi function definitions
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                functions=functions_metadata,
                temperature=0
            )

            response_msg = response.choices[0].message

            # N·∫øu GPT y√™u c·∫ßu g·ªçi h√†m
            if response_msg.function_call:
                function_name = response_msg.function_call.name
                function_args_raw = response_msg.function_call.arguments

                function_args_str = remove_extra_quotes(function_args_raw)

                try:
                    function_args = json.loads(function_args_str)
                except json.JSONDecodeError:
                    print("‚ùå L·ªói JSON trong arguments:", function_args_str)
                    continue

                # G·ªçi function ph√π h·ª£p
                if function_name == "about_booking":
                    result = about_booking(**function_args)
                elif function_name == "about_products":
                    result = about_products(**function_args)
                elif function_name == "reviews_search":
                    result = reviews_search(**function_args)
                else:
                    result = f"Function {function_name} is not define."

                # G·ª≠i k·∫øt qu·∫£ l·∫°i cho GPT ƒë·ªÉ t·ªïng h·ª£p tr·∫£ l·ªùi
                messages.append({
                    "role": "function",
                    "name": function_name,
                    "content": result
                })

                final_response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=messages,
                    temperature=0
                )

                reply = final_response.choices[0].message.content
                print("ü§ñ Chatbot:", reply)
                messages.append({"role": "assistant", "content": reply})

            else:
                # Kh√¥ng c·∫ßn g·ªçi h√†m, GPT tr·∫£ l·ªùi tr·ª±c ti·∫øp
                reply = response_msg.content
                print("ü§ñ Chatbot:", reply)
                messages.append({"role": "assistant", "content": reply})

        except Exception as e:
            print("‚ö†Ô∏è Error:", e)

if __name__ == "__main__":
    run_chat()
